// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
// Author: John Rollinson, 11/17/2017

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 
class String
{
    field Array chars;
    field int len;
    
    //DESCRIPTION: Constructs a new empty string with a maximum length 
    //					of maxLength and initial length of 0.
	//PRECONDITION: Assumes that the classes fields have been declared.
	//POSTCONDITION: Returns a new empty string of size maxLength.
    constructor String new(int maxLength)
    {
        if(maxLength < 1)
        {
            let maxLength = 1;
        }
        
        let chars = Array.new(maxLength);
        let len = 0;
        
        return this;
    }

    //DESCRIPTION: Disposes of the given string.
	//PRECONDITION: Assumes that memory has been allocated. 
	//POSTCONDITION: The space that was holding the string is now free.
    method void dispose()
    {
        do chars.dispose();
        do Memory.dealloc(this);
        
        return;
    }

    //DESCRIPTION: Returns the current length of this string. 
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: Returns the length as an integer.
    method int length()
    {
        return len;
    }

    //DESCRIPTION: Returns the character at the j-th location of this string.
	//PRECONDITION: Assumes that the string is initialized, and that its length
	//					contains j.
	//POSTCONDITION: Returns the char at the j-th position.
    method char charAt(int j)
    {
        return chars[j];
    }

    //DESCRIPTION: Sets the character at the j-th location of this string to c.
	//PRECONDITION: Assumes that the string is initialized, and that its length
	//					contains j.
	//POSTCONDITION: Value at index j has been replaced with char c.
    method void setCharAt(int j, char c)
    {
        let chars[j] = c;
        return;
    }

    //DESCRIPTION: Appends c to this string's end and returns this string.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: Returns the string with c appened at the end.
    method String appendChar(char c)
    {
        let chars[len] = c;
        let len = len + 1;
        return this;
    }

    //DESCRIPTION: Erases the last character from this string.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: The string is now 1 char shorter at the back.
    method void eraseLastChar()
    {
        if(len > 0)
        {
            let len = len - 1; 
        }
        return;
    }

    //DESCRIPTION: Returns the integer value of this string, until a 
    //					non-digit character is detected.
	//PRECONDITION: Assumes that the string is initialized
	//POSTCONDITION: Returns the integer value of this string.
    method int intValue()
    {
        var int num, i;
        var boolean isNeg;
        
        let num = 0;
        
        if(len > 1 & chars[0] = 45)
        {
            let i = i + 1;
            let isNeg = true;
        }
        else
        {
            let i = 0;
            let isNeg = false;
        }

        while(i < len  & String.isDigit(chars[i]))
        {
            let num = (num * 10) + chars[i] - 48;
            let i = i + 1;
        }
        
        if(isNeg)
        {
            return -num;
        }
        else
        {
            return num;
        }
    }
    //DESCRIPTION: Checks if the given char is a digit or another char.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: Return true if digit, false otherwise.
    function bool isDigit(char c)
    {
        return (c > 47) & (c < 58);
    }

    //DESCRIPTION: Sets this string to hold a representation of the given value.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: String is now holding the given value.
    method void setInt(int value)
    {
        return;
    }

	//DESCRIPTION: Returns the new line character.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: A new line is returned. 
    function char newLine()
    {
        return 128;
    }

    //DESCRIPTION: Returns the backspace character.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: A backspace is returned.
    function char backSpace()
    {
        return 129;
    }

    //DESCRIPTION: Returns the double quote (") character.
	//PRECONDITION: Assumes that the string is initialized.
	//POSTCONDITION: A " is returned.
    function char doubleQuote()
    {
        return 34;
    }
}
